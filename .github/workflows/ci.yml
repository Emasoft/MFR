name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
    - 'v*'
  pull_request:
    branches: [main]

# Make workflow cancellable
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  UV_VERSION: "0.7.13"
  DEFAULT_PYTHON: "3.11"
  # Git configuration
  GIT_AUTHOR_NAME: "Emasoft"
  GIT_AUTHOR_EMAIL: "713559+Emasoft@users.noreply.github.com"
  GIT_COMMITTER_NAME: "Emasoft"
  GIT_COMMITTER_EMAIL: "713559+Emasoft@users.noreply.github.com"

jobs:
  # Lint job removed - now handled by pre-commit workflow

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
        # Skip some combinations to reduce CI time
        - os: windows-latest
          python-version: '3.10'
        - os: macos-latest
          python-version: '3.10'

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
        cache-dependency-glob: |
          pyproject.toml
          uv.lock

    - name: Set up Python ${{ matrix.python-version }}
      run: |
        uv python install ${{ matrix.python-version }}
        uv python pin ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ -v --cov=src/mass_find_replace --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history

    - name: Run TruffleHog v3
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: >-
          --fail
          --no-verification
          --exclude-detectors generic-api-key,email

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
        cache-dependency-glob: |
          pyproject.toml
          uv.lock

    - name: Set up Python
      run: |
        uv python install ${{ env.DEFAULT_PYTHON }}
        uv python pin ${{ env.DEFAULT_PYTHON }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run safety check
      run: |
        uv pip install safety
        uv run safety check --json || true
      continue-on-error: true

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
        cache-dependency-glob: |
          pyproject.toml
          uv.lock

    - name: Set up Python
      run: |
        uv python install ${{ env.DEFAULT_PYTHON }}
        uv python pin ${{ env.DEFAULT_PYTHON }}

    - name: Install dependencies
      run: uv sync

    - name: Build package
      run: uv build

    - name: Check distribution
      run: |
        uv pip install twine
        uv run twine check dist/*

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 7

  release:
    name: Release to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
