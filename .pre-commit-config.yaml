# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
#
# This configuration is optimized for use with pre-commit-uv
# Install with: uv tool install pre-commit --with pre-commit-uv
# This speeds up Python-based hooks significantly
default_language_version:
  python: python3.11

# Ensure pre-commit uses uv for all Python-based hooks
default_install_hook_types: [pre-commit, pre-push, commit-msg]
minimum_pre_commit_version: '4.0.0'

# This section configures CI-only hooks (use with: pre-commit run --hook-stage manual)
ci:
  autofix_prs: false  # Don't auto-fix PRs, let developers handle it
  autoupdate_commit_msg: 'chore: pre-commit autoupdate'

repos:
  # UV for dependency management and formatting
  - repo: https://github.com/astral-sh/uv-pre-commit
    rev: 0.7.13
    hooks:
      # Keep uv.lock up to date
      - id: uv-lock
        files: ^(pyproject\.toml|uv\.lock)$
        pass_filenames: false
      # Export requirements for compatibility
      - id: uv-export
        args: [--frozen, --no-hashes, -o, requirements.txt]
        files: ^(pyproject\.toml|uv\.lock)$
      # Export dev requirements
      - id: uv-export
        name: uv-export dev-requirements
        args: [--frozen, --no-hashes, --extra=dev, -o, requirements-dev.txt]
        files: ^(pyproject\.toml|uv\.lock)$
      # CI-only: verify dependencies are synced
      - id: uv-sync
        stages: [manual]
        additional_dependencies: []
        pass_filenames: false

  # Gitleaks for secret scanning
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.27.2
    hooks:
      - id: gitleaks

  # Ruff for linting and formatting (runs faster with pre-commit-uv)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.8.5
    hooks:
      - id: ruff
        args: [--ignore, "E203,E402,E501,E266,W505,F841,F842,F401,W293,I001,UP015,C901,W291", --isolated, --fix, --output-format=full]
      - id: ruff-format
        args: [--line-length=320, --isolated]

  # Mypy for type checking (run with uv)
  - repo: local
    hooks:
      - id: mypy
        name: mypy
        entry: uv run mypy
        language: system
        types: [python]
        files: ^(src/|tests/)
        args:
          [
            --strict,
            --show-error-codes,
            --show-error-context,
            --pretty,
            --ignore-missing-imports,
            --no-warn-unused-ignores,
            --allow-untyped-decorators,  # For pytest fixtures
          ]
        require_serial: true

  # Deptry for dependency checking (run with uv)
  - repo: local
    hooks:
      - id: deptry
        name: deptry
        entry: uv run deptry
        language: system
        pass_filenames: false
        files: ^(src/|pyproject\.toml)$
        args: [src]

  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: check-toml
      - id: debug-statements
      - id: detect-private-key
        exclude: \.gitleaks\.toml$
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-json
      - id: pretty-format-json
        args: [--autofix, --no-sort-keys]

  # YAML linting (run with uv)
  - repo: local
    hooks:
      - id: yamllint
        name: yamllint
        entry: uv run yamllint
        language: system
        types: [yaml]
        args: [-c=.yamllint.yml]

  # YAML formatting with yamlfmt (GitHub Actions workflows only)
  - repo: local
    hooks:
      - id: yamlfmt
        name: yamlfmt (GitHub workflows)
        entry: ./scripts/yamlfmt.sh
        language: system
        types: [yaml]
        files: ^\.github/.*\.(yml|yaml)$
        require_serial: true

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        args: [--severity=warning]

  # GitHub Actions linting - actionlint must be installed separately
  # Install with: brew install actionlint (macOS) or download from GitHub
  - repo: local
    hooks:
      - id: actionlint
        name: actionlint
        entry: actionlint
        language: system
        files: ^\.github/workflows/.*\.(yml|yaml)$
        pass_filenames: true

  # Run tests before committing (only when Python files change)
  - repo: local
    hooks:
      - id: pytest
        name: pytest
        entry: uv run pytest
        language: system
        pass_filenames: false
        files: ^(src/.*\.py|tests/.*\.py|pyproject\.toml)$
        args: [tests/, -v]

  # Conventional commits check
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v4.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: []
        # Allow these commit types
        additional_dependencies: ['conventional-pre-commit']


# Configuration for specific hooks
exclude: |
  (?x)^(
    \.git/|
    \.mypy_cache/|
    \.pytest_cache/|
    \.venv/|
    venv/|
    \.env|
    build/|
    dist/|
    .*\.egg-info/|
    __pycache__/|
    \.coverage|
    htmlcov/|
    \.DS_Store|
    planned_transactions\.json|
    uv\.lock
  )$
