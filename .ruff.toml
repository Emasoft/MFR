# Ruff configuration for super-linter compatibility
# Note: The project primarily uses ruff via command-line arguments in CLAUDE.md
# This file provides defaults for super-linter integration

# Python version target
target-version = "py310"

# Line length to match yamllint config
line-length = 120

# Exclude paths
exclude = [
    ".venv",
    "venv",
    "env",
    ".env",
    "node_modules",
    "dist",
    "build",
    ".eggs",
    ".pytest_cache",
    ".mypy_cache", 
    ".git",
    ".act",
    "__pycache__",
    "*.egg-info",
]

[lint]
# Select rules - using the defaults plus some additional ones
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "PL",  # pylint
]

# Ignore rules that conflict with project standards or are mentioned in CLAUDE.md
ignore = [
    "E203",  # Whitespace before ':'
    "E402",  # Module imports not at top
    "E501",  # Line too long (handled by formatter)
    "E266",  # Too many leading '#' for block comment
    "W505",  # Doc line too long
    "F841",  # Local variable assigned but never used
    "F842",  # Local variable annotated but never used  
    "F401",  # Module imported but unused
    "W293",  # Blank line contains whitespace
    "I001",  # Import block unsorted
    "UP015", # Unnecessary open mode parameters
    "C901",  # Function too complex
    "W291",  # Trailing whitespace
    # Additional project-specific ignores
    "PLR0913", # Too many arguments in function definition
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements
    "PLR2004", # Magic value used in comparison
    "B007",    # Loop control variable not used within loop body
    "PTH123",  # open() should be replaced by Path.open()
    "UP007",   # Use X | Y for type annotations (not supported in Python 3.10)
    "UP035",   # typing.List is deprecated
    "B011",    # Do not assert False
    "S101",    # Use of assert detected
    "S105",    # Possible hardcoded password
    "S106",    # Possible hardcoded password
    "S107",    # Possible hardcoded password
    "S108",    # Probable insecure usage of temp file/directory
    "S603",    # subprocess without shell equals true
    "S607",    # Starting a process with a partial executable path
    "T201",    # print found
    "T203",    # pprint found
    "N806",    # Variable in function should be lowercase
    "SIM118",  # Use `key in dict` instead of `key in dict.keys()`
    "RET504",  # Unnecessary assignment before return
    "PTH100",  # os.path.abspath() should be replaced by Path.resolve()
    "PTH118",  # os.path.join() should be replaced by / operator
    "PTH119",  # os.path.basename() should be replaced by Path.name
    "PTH120",  # os.path.dirname() should be replaced by Path.parent
    "UP006",   # Use `list` instead of `List` for type annotation
    "UP037",   # Remove quotes from type annotation
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM117",  # Use single `with` statement
    "SIM108",  # Use ternary operator
    "PLW0603", # Using global statement
    "PLW0602", # Using global for but no assignment
    "PLE0704", # Bare raise statement not inside exception handler
    "C403",    # Unnecessary list comprehension
    "PTH101",  # os.chmod() should be replaced
    "PTH104",  # os.rename() should be replaced
    "PTH105",  # os.replace() should be replaced
    "PTH107",  # os.remove() should be replaced
    "PLC0415", # import should be at the top-level of a file
]

[lint.isort]
known-first-party = ["mass_find_replace"]

# Format settings
[format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true